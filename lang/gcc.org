* optimization
** =__builtin_expect=
=long __builtin_expect (long exp, long c)=
The Built-in Function is used to provide the compiler with branch prediction information.
#+BEGIN_SRC C
if (__builtin_expect(x, 0))
  foo();
#+END_SRC
indicate that we do not expect to call =foo=.
 
Common usage:
#+BEGIN_SRC C
#define likely(x) __builtin_expect(!!(x), 1) // x most likely true
#define unlikely(x) __builtin_expect(!!(x), 0) // x most likely false
#+END_SRC
** Built-in functions for atomic memory access
- n++ class
  #+BEGIN_SRC C
  type __sync_fetch_and_add(type *ptr, type value, ...); // m+n
  type __sync_fetch_and_sub(type *ptr, type value, ...); // m-n
  type __sync_fetch_and_or(type *ptr, type value, ...);  // m|n
  type __sync_fetch_and_and(type *ptr, type value, ...); // m&n
  type __sync_fetch_and_xor(type *ptr, type value, ...); // m^n
  type __sync_fetch_and_nand(type *ptr, type value, ...); // (~m)&n
  #+END_SRC
- ++n class
  #+BEGIN_SRC C
  type __sync_add_and_fetch(type *ptr, type value, ...); // m+n
  type __sync_sub_and_fetch(type *ptr, type value, ...); // m-n
  type __sync_or_and_fetch(type *ptr, type value, ...); // m|n
  type __sync_and_and_fetch(type *ptr, type value, ...); // m&n
  type __sync_xor_and_fetch(type *ptr, type value, ...); // m^n
  type __sync_nand_and_fetch(type *ptr, type value, ...); // (~m)&n
  #+END_SRC
- [[https://link.jianshu.com/?t=http://en.wikipedia.org/wiki/Compare-and-swap][CAS]] class
  #+BEGIN_SRC C
  // return true if *ptr equal with oldval and is writed with newval
  bool __sync_bool_compare_and_swap (type *ptr, type oldval, type newval, ...);
  type __sync_val_compare_and_swap (type *ptr, type oldval, type newval, ...);
  #+END_SRC
- ptr class
  #+BEGIN_SRC C
  // set *ptr to value
  type __sync_lock_test_and_set (type *ptr, type value, ...);
  void __sync_lock_release (type *ptr, ...);
  #+END_SRC

Case:
#+BEGIN_SRC C :exports both
  int lock = 0;
  int old_value = __sync_bool_compare_and_swap(&lock, 0, 1);
  printf("lock=%d\n", lock);
  printf("old_value=%d\n", old_value);
#+END_SRC

#+RESULTS:
| lock=1      |
| old_value=1 |



** afdas
#+BEGIN_SRC C
  int main(int argc, char *argv[])
  {
      return 0;
  }
#+END_SRC
